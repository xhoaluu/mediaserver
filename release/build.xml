<?xml version="1.0" encoding="utf-8"?>
<project name="media.server.release" default="release" basedir=".">

	<!--property name="release.version" value="2.1.0.BETA2-SNAPSHOT" /-->

	<property name="release.dir" location="${ant.file.media.server.release}/../target/release" />
	<property name="release.dir.standalone" location="${ant.file.media.server.release}/../standalone" />
	<property name="release.dir.all" location="${ant.file.media.server.release}/../all" />

	<property name="core.location" location="${ant.file.media.server.release}/../../core" />
	<!-- property name="docs.stage.dir" location="${ant.file.mobicents.release}/../documentation" / -->
	<property name="docs.stage.dir" location="${core.location}/docs" />
	<property name="jdocbook-mobicents" location="${docs.stage.dir}/jdocbook-mobicents" />
	<property name="test.suite.location" location="${ant.file.media.server.release}/../../test-suite" />

	<condition property="mvn.executable" value="${sys.M2_HOME}\bin\mvn.bat" else="mvn">
		<os family="windows" />
	</condition>

	<!-- Media Server Checkout ############################################# -->

	<condition property="mobicents.media.server.checked.out">
		<and>
			<available file="${ant.file.media.server.release}/../target/servers/media/core/.svn/entries" />
			<available file="${ant.file.media.server.release}/../target/servers/media/controllers/.svn/entries" />
			<available file="${ant.file.media.server.release}/../target/servers/media/examples/.svn/entries" />
		</and>
	</condition>
	<target name="get-custom-media-server" depends="checkout-media-server,update-media-server" />

	<target name="checkout-media-server" unless="mobicents.media.server.checked.out">
		<echo>Checking out Mobicents Media Server</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../">
			<arg line="-f internal-components-checkout.xml validate -P checkout" />
		</exec>
	</target>

	<target name="update-media-server">
		<echo>Updating Mobicents Media Server</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../">
			<arg line="-f internal-components-checkout.xml validate -P update" />
		</exec>
	</target>

	<!-- Fetch and build documentation #################################### -->

	<condition property="media.docs.checked.out">
		<and>
			<!-- available file="${docs.stage.dir}/common/.svn/entries" />
			<available file="${docs.stage.dir}/media/.svn/entries" / -->
			<available file="${docs.stage.dir}/.svn/entries" />
		</and>
	</condition>
	<!-- target name="get-documentation" depends="checkout-documentation,update-documentation" / -->
	<target name="get-documentation" />

	<target name="checkout-documentation" unless="media.docs.checked.out">
		<echo>Checking out documentation</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../">
			<arg line="-f documentation-checkout.xml validate -P checkout" />
		</exec>
	</target>

	<target name="update-documentation">
		<echo>Updating documentation</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.media.server.release}/../">
			<arg line="-f documentation-checkout.xml validate -P update" />
		</exec>
	</target>

	<!-- target name="build-documentation" depends="get-documentation" -->
	<target name="build-documentation">
		<echo>Building documentation</echo>

		<exec executable="${mvn.executable}" dir="${docs.stage.dir}/">
			<arg line="clean compile" />
		</exec>
		<copy overwrite="true" todir="${documentation.target.dir}">
			<fileset dir="${docs.stage.dir}/sources-asciidoc/target/generated-docs/html-book/" />
		</copy>

		<copy overwrite="true" todir="${documentation.target.dir}">
			<fileset dir="${docs.stage.dir}/docs/sources-asciidoc/target/generated-docs/pdf/" />
		</copy>

	</target>


	<!-- Release MMS Standalone ############################################ -->

	<target name="release-standalone">
		<delete dir="${release.dir.standalone}" />

		<exec executable="${mvn.executable}" dir="${core.location}/..">
			<!--arg line="clean install -P set-svn-revision,standalone,ss7,linux" /-->
			<arg line="clean install -Dmaven.test.failure.ignore=true -Dmaven.test.skip=true" />

		</exec>
		<copy overwrite="true" todir="${release.dir.standalone}">
			<!--fileset file="${core.location}/server-standalone/target/mms-standalone-server/**" /-->
			<fileset file="${core.location}/../bootstrap/target/restcomm-media-server/**" />
		</copy>

		<copy overwrite="true" todir="${release.dir.standalone}/clients">
			<!--fileset file="${core.location}/server-standalone/target/mms-standalone-server/**" /-->
			<fileset file="${core.location}/../concurrent/target/*.jar" />
			<fileset file="${core.location}/../client/mgcp/driver/target/*.jar" />
			<fileset file="${core.location}/../client/jsr-309/driver/target/*.jar" />
		</copy>
		<!--antcall target="build-documentation">
			<param name="documentation.target.dir" location="${release.dir.standalone}/documentation" />
		</antcall-->
		
		<copy overwrite="true" todir="${release.dir.standalone}/docs">
			<fileset file="${core.location}/../docs/sources-asciidoc//target/generated-docs/**" />
		</copy>

		<copy overwrite="true" file="${ant.file.media.server.release}/../release-standalone-README.txt" tofile="${release.dir.standalone}/README.txt" />

		<zip destfile="${ant.file.media.server.release}/../${zip.filename}">
            <zipfileset filemode="755" dir="${release.dir.standalone}">
                <include name="*.sh"/>
                <include name="**/*.sh"/>
            </zipfileset>
            <zipfileset dir="${release.dir.standalone}">
                <exclude name="*.sh"/>
                <exclude name="**/*.sh"/>
            </zipfileset>
        </zip>
	</target>


	<!-- Release MMS src ################################################### -->

	<target name="set-src-excludes">
		<defaultexcludes add="**/target/**" />
		<defaultexcludes add="**/docs/**" />
		<defaultexcludes add="**/legacy/**" />
		<defaultexcludes add="**/release/**" />
		<defaultexcludes add="**/logs/**" />
		<defaultexcludes add="**/tests/**" />
		<defaultexcludes add="**/${*}/**" />
		<defaultexcludes add="**/*JBOSS_HOME*/**" />
		<defaultexcludes add="**/*CATALINA_HOME*/**" />
		<defaultexcludes add="**/.gwt-cache/**" />
		<defaultexcludes add="**/.settings/**" />
		<defaultexcludes add="**/.project" />
		<defaultexcludes add="**/.classpath" />
		<defaultexcludes add="**/*.class" echo="true" />
	</target>

	<target name="release-src" depends="set-src-excludes">
		<echo>Building src-zip from ${core.location} and ${test.suite.location}</echo>
		<copy todir="${release.dir}/src/mobicents/servers/media/core" includeEmptyDirs="false">
			<fileset dir="${core.location}" />
		</copy>
		<copy todir="${release.dir}/src/mobicents/servers/media/test-suite" includeEmptyDirs="false">
			<fileset dir="${test.suite.location}" />
		</copy>
		<zip destfile="${ant.file.media.server.release}/../${zip.filename}" basedir="${release.dir}/src" />
		<delete dir="${release.dir}/src" />

		<defaultexcludes default="true" />
	</target>

	<!-- Release MMS (Everything) ########################################## -->

	<target name="release">
		<tstamp>
			<format property="time.stamp" pattern="yyMMddHHmm" />
		</tstamp>

		<delete dir="." includes="mms-*${release.version}-*.zip" />

		<antcall target="release-standalone">
			<param name="zip.filename" value="TelScale-media-server-${release.version}.zip" />
		</antcall>
	
		<!--antcall target="release-src">
			<param name="zip.filename" value="mms-${release.version}-${time.stamp}-src.zip" />
			<param name="src.location" value="${ant.file.media.server.release}/../../" />
		</antcall-->

		<antcall target="clean" />
	</target>

	<!-- Release MMS (Everything) from tagged content ###################### -->

	<target name="release-custom" depends="get-custom-media-server">
		<tstamp>
			<format property="time.stamp" pattern="yyMMddHHmm" />
		</tstamp>
		<delete dir="." includes="mms-*${release.version}-*.zip" />

		<antcall target="release-standalone">
			<!--param name="zip.filename" value="mms-standalone-${release.version}-${time.stamp}.zip" /-->
			<param name="zip.filename" value="TelScale-media-server-${release.version}.zip" />
			<param name="core.location" location="${ant.file.media.server.release}/../target/servers/media/core" />
			<param name="test.suite.location" location="${ant.file.media.server.release}/../target/servers/media/test-suite" />

			<param name="release.dir.core" location="${ant.file.media.server.release}/../target/servers/media/release/core" />
			<param name="release.dir.all" location="${ant.file.media.server.release}/../target/servers/media/release/all" />
			<param name="docs.stage.dir" location="${ant.file.media.server.release}/../target/servers/media/core/docs" />			
		</antcall>

		<antcall target="release-all">
			<param name="zip.filename" value="mms-${jboss.name}-${release.version}-${time.stamp}.zip" />
			<param name="core.location" location="${ant.file.media.server.release}/../target/servers/media/core" />
			<param name="test.suite.location" location="${ant.file.media.server.release}/../target/servers/media/test-suite" />

			<param name="release.dir.standalone" location="${ant.file.media.server.release}/../target/servers/media/release/standalone" />
			<param name="release.dir.all" location="${ant.file.media.server.release}/../target/servers/media/release/all" />
			<param name="jboss.home" location="${ant.file.media.server.release}/../target/servers/media/release/all/${jboss.home.relative.path}/" />
			<param name="docs.stage.dir" location="${ant.file.media.server.release}/../target/servers/media/core/docs" />			
		</antcall>

		<antcall target="release-src">
			<param name="zip.filename" value="mms-${release.version}-${time.stamp}-src.zip" />
			<param name="src.location" location="${ant.file.media.server.release}/../target/servers/media/" />
		</antcall>

		<antcall target="clean">
			<param name="release.dir.standalone" location="${ant.file.media.server.release}/../target/servers/media/release/standalone" />
			<param name="release.dir.all" location="${ant.file.media.server.release}/../target/servers/media/release/all" />
		</antcall>
	</target>

	<!-- Clean ############################################################ -->

	<target name="clean">
		<delete dir="${release.dir}" />
		<delete dir="${release.dir.standalone}" />
		<delete dir="${release.dir.all}" />
		<!-- delete dir="${docs.stage.dir}" / -->
	</target>

</project>
